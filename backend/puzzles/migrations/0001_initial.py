# Generated by Django 4.2.7 on 2025-08-05 17:10

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Puzzle',
            fields=[
                ('id', models.CharField(max_length=20, primary_key=True, serialize=False)),
                ('category', models.CharField(choices=[('math', 'Math'), ('word', 'Word'), ('art', 'Art')], max_length=10)),
                ('difficulty', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('generator_model', models.CharField(choices=[('gpt4o', 'GPT-4o'), ('claude3', 'Claude 3'), ('gemini', 'Gemini')], max_length=20)),
                ('puzzle_content', models.JSONField()),
                ('solution', models.TextField()),
                ('generator_solution', models.TextField()),
                ('validator_results', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('total_attempts', models.IntegerField(default=0)),
                ('successful_solves', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StumpTally',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ai_model', models.CharField(choices=[('gpt4o', 'GPT-4o'), ('claude3', 'Claude 3'), ('gemini', 'Gemini')], max_length=20)),
                ('category', models.CharField(choices=[('math', 'Math'), ('word', 'Word'), ('art', 'Art')], max_length=10)),
                ('successful_stumps', models.IntegerField(default=0)),
                ('total_generated', models.IntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'unique_together': {('ai_model', 'category')},
            },
        ),
        migrations.CreateModel(
            name='DifficultyHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('math', 'Math'), ('word', 'Word'), ('art', 'Art')], max_length=10)),
                ('date', models.DateField()),
                ('difficulty', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('previous_difficulty', models.FloatField(validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('adjustment_reason', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['-date'],
                'unique_together': {('category', 'date')},
            },
        ),
        migrations.CreateModel(
            name='PlayerProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('solved', models.BooleanField(default=False)),
                ('solve_time', models.IntegerField(blank=True, null=True)),
                ('attempts', models.IntegerField(default=0)),
                ('solved_at', models.DateTimeField(blank=True, null=True)),
                ('puzzle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='puzzles.puzzle')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'puzzle')},
            },
        ),
    ]
